---
layout:     post
title:      "HDU1548 Catch That Cow"
subtitle:   " BFS"
date:        2017-02-13 21:03:32
author:     "Luoyayu"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - ACM_搜索
---

###   HDU 1548
   -<strong>Catch That Cow</strong>   
>   Problem Description       
Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.

* Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute
* Teleporting: FJ can move from any point X to the point 2 × X in a single minute.

If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?
>  Input     
The input consists of several test cases.,Each test case contains two lines.
The first line contains three integers N ,A,B( 1 <= N,A,B <= 200) which describe above,The second line consist N integers k1,k2,....kn.
A single 0 indicate the end of the input.
>   Output     
 For each case of the input output a interger, the least times you have to press the button when you on floor A,and you want to go to floor B.If you can't reach floor B,printf "-1".
>  Sample Input    
>5 1 5
3 3 1 2 5
0

>   Sample Output    
>3


## *题解*
 简单bfs,也可以用最短路求解有时间补上==。

### code

```cpp 
#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
const int maxn = 222;
int n, ki[maxn], vis[maxn];
int bfs(int a, int b)
{
	queue<int> Q;
	Q.push(a);
	vis[a] = 1;
	if (a == b) return 0;
	else
	{
		while (!Q.empty())
		{
			int u = Q.front();
			Q.pop();
			if (u + ki[u] > 0 && u + ki[u] <= n&&!vis[ki[u]+u] )
			{
				Q.push(u + ki[u]);
				vis[u + ki[u]] = vis[u] + 1;
			}
			if (u - ki[u] > 0 && u - ki[u] <= n && !vis[ u-ki[u] ])
			{
				Q.push(u - ki[u]);
				vis[u - ki[u]] = vis[u] + 1;
			}
			if(u==b)
				return vis[u]-1;
		}
	}

	return -1;
}
int main()
{
	int a, b;
	while (scanf("%d",& n), n)
	{
		scanf("%d%d",& a,&b);
		for (int i=1;i<=n;i++)
			scanf("%d",& ki[i]);
		memset(vis, 0, sizeof(vis));
		printf("%d\n", bfs(a, b));
	}
	return 0;
}
```