---
layout:     post
title:      "HDU1548 Catch That Cow"
subtitle:   " BFS"
date:        2017-02-13 21:22:44
author:     "Luoyayu"
header-img: "img/post-bg-universe.jpg"
catalog: true
tags:
    - ACM_搜索
---

###   HDU 1548
   -<strong>Catch That Cow</strong>   

>   Problem Description       

Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.

* Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute
* Teleporting: FJ can move from any point X to the point 2 × X in a single minute.

If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?

>  Input     

Line 1: Two space-separated integers: N and K

>   Output     

Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.
>  Sample Input  

>5 17  

>   Sample Output    
>4   

>Source
[USACO 2007 Open Silver](http://acm.hdu.edu.cn/search.php?field=problem&key=USACO+2007+Open+Silver&source=1&searchmode=source)

## *题解*
 对农夫的三种行为广搜，注意`K=N`时

### code

```cpp 
#include <iostream>
#include <cstdio> 
#include <cstring>
#include <queue>
using namespace std;
const int Max = 100000 + 10;
int vis[Max*2]; 
int time[Max*2]; 
int n,k;
void bfs(int x)
{
    int nx,i,s;
    queue<int> p;
    vis[x] = 1;
    time[x] = 0;
    p.push(x); 
    while(!p.empty())
    {
        s = p.front(); 
        p.pop(); 
        for(i=1; i<=3; i++) //bfs
        {
            if(i == 1) 
                nx = s + 1;
            else if(i == 2)
                nx = s - 1;
            else
                nx = s * 2;
            
            if(!vis[nx] && nx <= Max && nx >= 0) 
            {
                vis[nx] = 1;
                p.push(nx);
                time[nx] = time[s] + 1; 
            }
            if(nx == k)  
            {
                cout<<time[nx]<<endl;
                return;
            }
        }            
    }
}
int main()
{
    while(scanf("%d %d",&n,&k) != EOF)
    {
        memset(vis, 0, sizeof(vis));
        memset(time, 0, sizeof(time));
        if(n == k)
            cout<<"0"<<endl;
        else 
            bfs(n);
    }
    return 0;
}
```