---
layout:   post 
title:   "HDU 1728 逃离迷宫"
subtitle:  "BFS"
date:       2017-03-08 16:16:26
author:    "Luoyayu"
header-img: "img/post-bg-universe.jpg"
catalog: true
tags:
    - ACM_搜索(bfs)

---

###   Problem  <strong>Rescue</strong>  
 
>####  <font color="#0099ff">Problem Description </font>   
给定一个m × n (m行, n列)的迷宫，迷宫中有两个位置，gloria想从迷宫的一个位置走到另外一个位置，当然迷宫中有些地方是空地，gloria可以穿越，有些地方是障碍，她必须绕行，从迷宫的一个位置，只能走到与它相邻的4个位置中,当然在行走过程中，gloria不能走到迷宫外面去。令人头痛的是，gloria是个没什么方向感的人，因此，她在行走过程中，不能转太多弯了，否则她会晕倒的。我们假定给定的两个位置都是空地，初始时，gloria所面向的方向未定，她可以选择4个方向的任何一个出发，而不算成一次转弯。gloria能从一个位置走到另外一个位置吗？

>####  <font color="#0099ff">Input </font>       
第1行为一个整数t (1 ≤ t ≤ 100),表示测试数据的个数，接下来为t组测试数据，每组测试数据中， 
　　第1行为两个整数m, n (1 ≤ m, n ≤ 100),分别表示迷宫的行数和列数，接下来m行，每行包括n个字符，其中字符'.'表示该位置为空地，字符'*'表示该位置为障碍，输入数据中只有这两种字符，每组测试数据的最后一行为5个整数k, x 1, y 1, x 2, y 2 (1 ≤ k ≤ 10, 1 ≤ x 1, x 2 ≤ n, 1 ≤ y 1, y 2 ≤ m),其中k表示gloria最多能转的弯数，(x 1, y 1), (x 2, y 2)表示两个位置，其中x 1，x 2对应列，y 1, y 2对应行。

>####  <font color="#0099ff">Output</font>   
每组测试数据对应为一行，若gloria能从一个位置走到另外一个位置，输出“yes”，否则输出“no”。

>####  <font color="#0099ff">Sample Input</font>   
>2
5 5    
...**  
*.**.  
.....  
.....  
*....   
1 1 1 1 3  
5 5  
...**  
*.**.  
.....  
.....   
*....   
2 1 1 1 3       
#.#####.    
#.a#..r.     
#..#x...    
..#..#.#    
#...##.   .  
.#......     
........      
 
>####  <font color="#0099ff">Sample Output</font>     
>no    
yes      

>####  <font color="#0099ff">Source</font>
[“网新恩普杯”杭州电子科技大学程序设计邀请赛](http://acm.hdu.edu.cn/search.php?field=problem&key=%A1%B0%CD%F8%D0%C2%B6%F7%C6%D5%B1%AD%A1%B1%BA%BC%D6%DD%B5%E7%D7%D3%BF%C6%BC%BC%B4%F3%D1%A7%B3%CC%D0%F2%C9%E8%BC%C6%D1%FB%C7%EB%C8%FC&source=1&searchmode=source)

## *题解*
 bfs vis[steps][转向][x][y]四维标记数组，对于转弯次数小的优先搜索，输入坑，另外考虑转回初始位置要重置下，


>####  <font color="#0099ff">Code</font>

```cpp

#include<stdio.h>
#include<queue>
#include<string.h>
#include<algorithm>
using namespace std;
const int maxn=105;
int dir[4][2]= {1,0,0,1,-1,0,0,-1};
int vis[15][4][maxn][maxn];//走过的步数,转向，x,y; 
char map[maxn][maxn];
int sx,sy,ey,ex,n,m,k;
struct node
{
    int x,y,direct,ts;
    friend bool operator<(node a,node b)//重载<最小值 
    {
        return a.ts>b.ts;
    }

} st,nt;//起点与下个点 
int check(node p)
{
    if(map[p.x][p.y]=='*'||p.x<1||p.x>n||p.y<1||p.y>m)
        return 1;
    return 0;
}
void bfs()
{
    priority_queue<node>q;
    st.x=sx,st.y=sy,st.ts=0,st.direct=0;//init
    q.push(st);
    while(!q.empty())
    {
        st=q.top();q.pop();
     	if(st.x==ex&&st.y==ey&&st.ts<=k)//start check 
   		{
	        printf("yes\n");
	        return ;
    	}
        if(st.ts>k) continue;
        for(int i=0; i<4; i++)
        {
        	nt=st;//moving 
            nt.x+=dir[i][0];
            nt.y+=dir[i][1];
            if(check(nt)) continue ;//out ap or at *
            
            if(st.x==sx&&st.y==sy) //可能转回来必要重置 
                nt.direct=i, nt.ts=0;
            else
            {
                if(i!=st.direct) 
					 nt.ts++;
                nt.direct=i;
            }
            if(vis[nt.ts][i][nt.x][nt.y]) continue;//此点，转i方向过 
            vis[nt.ts][i][nt.x][nt.y]=1;
            q.push(nt);
        }
    }
    printf("no\n");
}
int main()
{
    int t,i,j;
    scanf("%d",&t);
    while(t--)
    {
		memset(vis,0,sizeof(vis));
        scanf("%d %d",&n,&m);
        for(i=1; i<=n; i++)
    	{
    		getchar();
			for(int j=1;j<=m;j++)
    			scanf("%c",&map[i][j]);
    	}
        scanf("%d%d%d%d%d",&k,&sy,&sx,&ey,&ex);
		if(sx==ex&&sy==ey)
		{
			printf("yes\n");
			continue;	
		} 
        bfs();
    }
    return 0;
}

```